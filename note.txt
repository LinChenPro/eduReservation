purchase : res_ error
add 
	hours_paid
	hours_not_paid
	hours_consume

* teacher schedule: 

get_teacher_schedule(tid, week_nb){
	return cherche result of table teacher_schedule;
	ts_slot_n par default '00000000000....'
}

atomic_set_teacher_schedule(tid, week_nb, from_day, from_h, to_day, to_h, value){
	return cherche result of table teacher_schedule;
	ts_slot_n par default '00000000000....'
}

get_teacher_reservations(tid, week_nb){
	array of reservations (day<>null, from<>null, to<>null, statut<>cancelled);
}

get_teacher_operations(tid, week_nb){
	array of reservations (day, from<>null, to<>null, statut=1);
}













->
tid,[week_nb]
					->
					uid, week_nb
					<-
					stamp

					->
					uid, week_nb
					<-
					["000...", "001...", "001...", "001...", "001...", "001...", "001..."]

					->
					uid, week_nb
					<-
					all reservations this week (tid, sid, tname, sname, day_nb, h1, h2,categ_id, categ_name, statut, my_role)

					->
					uid, week_nb
					<-
					all my operations this week (tid, sid, tname, sname, day_nb, h1, h2,categ_id, categ_name, statut, my_role)

<-


stamp
crt_day_nb
crt_week_nb
demande_week_nb
days = [
	{nb, date_str, week_str, hours=[0,1,0,1,1,0...]}
	{nb, date_str, week_str, hours=[0,1,0,1,1,0...]}
	{nb, date_str, week_str, hours=[0,1,0,1,1,0...]}
	{nb, date_str, week_str, hours=[0,1,0,1,1,0...]}
	{nb, date_str, week_str, hours=[0,1,0,1,1,0...]}
	{nb, date_str, week_str, hours=[0,1,0,1,1,0...]}
	{nb, date_str, week_str, hours=[0,1,0,1,1,0...]}
]
reservations = 
[
 "select reservation.*, t.user_name as t_name, s.user_name as s_name, c.categ_name as categ_name "
."from reservation, users as t, users as s, categories as c "
."where t.user_id=res_tid and s.user_id=res_sid and c.categ_id=res_categ_id and res_statut=1 "
."and 1 in(res_tid, res_sid)"


select reservation.*, t.user_name as t_name, s.user_name as s_name, c.categ_name as categ_name
from reservation, users as t, users as s, categories as c
where t.user_id=res_tid and s.user_id=res_sid and c.categ_id=res_categ_id and res_statut=1
and 1 in(res_tid, res_sid)


res_id
res_tid name
res_sid name
res_categ_id name
res_day_nb
res_begin_nb
res_end_nb
res_statut

res_week_nb

]	
options = 
[

]	

teacher schedule : where selected_tid in(tid, sid) : all res et ope in which i'm teacher or student
student schedule : where tid in(selected_sid, selected_tid) or sid in(selected_sid, selected_tid) all res et ope in which me or the teacher is teacher or student 

The only resource critic is the calendar week of every one.
So the atomic opreation begin with the update of this table.



current progress : 
finish principal booking functions, 
task rest:
	better creation, moving, and better view of detail span.
	data level : 
		find better bending moment of prise-operation.

thingking : 
	do we realy need lock for actions like restore, delete, cancel? we should need lock for load?
	how to treate Time zone?

next step:
demande for week-uid lock in one sql query
update reservation status when operations are expired


======================================================
submit operations to do the payment, then create the reservations.(with the manipulation of session statut)


1. booking_resume.php 

(calcul by session and compte situations)

you have xxx on your compte.
you have the follow purchases:
date teacher categ prise total consume rest

---------------------
after the cancel of the follow lessons:
date teacher categ n lessons, h hours, rembourse to purchase 
date teacher categ n lessons, h hours, rembourse to your compte

you will have xxx on your compte.
you have the follow purchases:
date teacher categ prise total consume rest
----------------------

you have selected the new lessons as follow, you may select the payment mode for them:
teacher categ n lesson, h hours :  type_purchase(h hours, prise)		compte solde(rest)		payment rest
teacher categ n lesson, h hours :  type_purchase(h hours, prise)		compte solde(rest)		payment rest
teacher categ n lesson, h hours :  type_purchase(h hours, prise)		compte solde(rest)		payment rest
teacher categ n lesson, h hours :  type_purchase(h hours, prise)		compte solde(rest)		payment rest

-----------------------
you need to pay : xxxx  select payment type: wechat/card [button payment]




2 booking_payment.php
(change session status to waiting payment)

payment procedules

(simuler buttons)
[good payment]  [bad payment]


(all payment page should add a control segment to goto right page by session statut)

3 booking_payment_result.php

(get simuleted result of payment) (in real:do payment and reseive result safely)

(change session status to payment succes or payment failled)

if(succes){
	change operations to reservation, add history

	"your payment is accepted."

	[confirm button]
}

if(failled){
	cancel the new lesson operations

	"your payment is refused. all the new lessons will not be added"
	"do you want to do the cancel and move operation(the will not be done by default)"?

	do cancel  y/n      do move y/n

	[confirm button]

}

4 booking_confirm.php

if(from failled){
	cancel or do operations that the user selected(or it will be done by batch)
}

goto show schedule page(no edit mode).




abandonOperations($session_id, ...$ope_status);
applyOperations($session_id, ...$ope_status);

TODO("booking : manage page affichage based on session statut");
TODO("add session statut : on_selection, waiting_payment_result, archive, user can change only when 'on_selection'");
TODO("change current session statut to finish (or delete session ?)");
TODO("change current session statut to waiting payment"); 
TODO("change current session status to payment succes or payment failed");
TODO("change current session status to applied or abandon");

TODO("calcul resume, show resume, show selection of mode and type of payment");
TODO("student_booking in read mode");

!!! change balance and purchase situation after payment.





js 
rembourse abandon


